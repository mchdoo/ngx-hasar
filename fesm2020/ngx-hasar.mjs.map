{"version":3,"file":"ngx-hasar.mjs","sources":["../../../projects/ngx-hasar/src/hasar.token.ts","../../../projects/ngx-hasar/src/services/hasar.service.ts","../../../projects/ngx-hasar/src/services/comandos-fiscales.service.ts","../../../projects/ngx-hasar/src/services/comandos.service.ts","../../../projects/ngx-hasar/src/index.ts","../../../projects/ngx-hasar/src/ngx-hasar.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\n\nexport type HasarConfig = {\n    URL: string;\n    timeout: number;\n}\n\nexport const HASAR_CONFIG = new InjectionToken<HasarConfig>('127.0.0.1');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { timeout } from 'rxjs/operators';\nimport { HASAR_CONFIG, HasarConfig } from '../hasar.token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HasarProvider {\n  constructor(\n    private http: HttpClient,\n    @Inject(HASAR_CONFIG) private hasarUrl: HasarConfig // private hasarTokenService: HasarTokenService\n  ) {}\n\n  private send(\n    comando: object,\n    comandoType: string,\n    handleData: (data: Object) => void,\n    handleError: (error: Error) => void,\n    timeOut: number = 10000\n  ) {\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/json')\n      .set('Authorization', 'Basic ' + btoa(':9999'));\n\n    this.http\n      .post(\n        this.hasarUrl.URL + '/' + comandoType + '.json',\n        JSON.stringify(comando),\n        {\n          headers,\n          responseType: 'json',\n        }\n      )\n      .pipe(timeout(this.hasarUrl.timeout))\n      .subscribe(\n        (data) => {\n          handleData(data);\n        },\n        (error) => {\n          handleError(error);\n        }\n      );\n  }\n\n  sendComando(\n    comando: object,\n    handleData: (data: any) => void,\n    handleError: (error: Error) => void\n  ) {\n    return this.send(comando, 'comandos', handleData, handleError);\n  }\n\n  sendFiscal(\n    comando: object,\n    handleData: (data: any) => void = (data) => {\n      console.log('Mensaje FISCAL', data);\n    },\n    handleError: (error: Error) => void = (error) => {\n      console.error('ERROR FISCAL:', error);\n    }\n  ) {\n    return this.send(comando, 'fiscal', handleData, handleError);\n  }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { ModeloItem } from '../models/item';\nimport { HasarProvider } from './hasar.service';\nimport { TipoCliente } from '../models/cliente';\nimport { DocData } from '../lib/types/comandoTipos';\n\nexport { ModeloItem };\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComandosFiscalesService {\n  constructor(private hasarProvider: HasarProvider) {}\n\n  /* Abre documento. */\n  abrirDoc(\n    codigo:\n      | 'TiqueFacturaA'\n      | 'TiqueFacturaB'\n      | 'TiqueFacturaC' = 'TiqueFacturaC'\n  ) {\n    let config = {\n      AbrirDocumento: {\n        CodigoComprobante: codigo,\n      },\n    };\n\n    return this.hasarProvider.sendFiscal(config);\n  }\n\n  imprimirItem(props: ModeloItem) {\n    let config = {\n      ImprimirItem: {\n        Descripcion: props.descripcion,\n        Cantidad: props.cantidad,\n        PrecioUnitario: props.precioUnitario,\n        CondicionIVA: 'Gravado',\n        AlicuotaIVA: props.alicuotaIVA,\n        OperacionMonto: 'ModoSumaMonto',\n        TipoImpuestoInterno: 'IIVariableKIVA',\n        MagnitudImpuestoInterno: '0.00',\n        ModoDisplay: 'DisplayNo',\n        ModoBaseTotal: 'ModoPrecioTotal',\n        UnidadReferencia: props.unidadReferencia,\n        CodigoProducto: props.codigoProducto,\n        CodigoInterno: props.codigoInterno,\n        UnidadMedida: props.unidadMedida,\n      },\n    };\n\n    return this.hasarProvider.sendFiscal(config);\n  }\n\n  imprimirTextoFiscal(textoFiscal: string, atributo: string = 'Centrado') {\n    const config = {\n      ImprimirTextoFiscal: {\n        Atributo: atributo,\n        Texto: textoFiscal,\n        ModoDisplay: 'DisplayNo',\n      },\n    };\n\n    return this.hasarProvider.sendFiscal(config);\n  }\n\n  cerrarDoc(\n    { copias }: { copias?: number } = {},\n    handleData: (data: DocData) => void = () => {}\n  ) {\n    let config = {\n      CerrarDocumento: {\n        Copias: copias,\n      },\n    };\n\n    return this.hasarProvider.sendFiscal(config, handleData);\n  }\n\n  imprimirPago({\n    descripcion,\n    importe,\n    anulacion,\n  }: {\n    descripcion?: string;\n    importe: number;\n    anulacion?: boolean;\n  }) {\n    const config = {\n      ImprimirPago: {\n        Descripcion: descripcion ? descripcion : 'Su pago',\n        Monto: importe,\n        Operacion: anulacion == true ? 'Anular' : 'Pagar',\n      },\n    };\n\n    return this.hasarProvider.sendFiscal(config);\n  }\n\n  cerrarJornada(reporte: 'ReporteX' | 'ReporteZ' = 'ReporteZ') {\n    const config = {\n      CerrarJornadaFiscal: {\n        Reporte: reporte,\n      },\n    };\n\n    return this.hasarProvider.sendFiscal(\n      config,\n      (data) => {\n        console.log('Datos Cliente', data);\n      },\n      (error) => {\n        console.error('Error Datos Cliente', error);\n      }\n    );\n  }\n\n  abrirCajonDinero() {\n    this.hasarProvider.sendFiscal({ AbrirCajonDinero: {} }, (data) => {\n      console.log('AbrirCajon', data);\n    });\n  }\n\n  cargarDatosCliente(cliente: TipoCliente) {\n    const config = {\n      CargarDatosCliente: {\n        RazonSocial: cliente.razonSocial,\n        NumeroDocumento: cliente.numeroDocumento,\n        ResponsabilidadIVA: cliente.responsabilidadIVA,\n        TipoDocumento: cliente.tipoDocumento,\n        Domicilio: cliente.domicilio,\n      },\n    };\n\n    console.log(config);\n\n    return this.hasarProvider.sendFiscal(config);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HasarProvider } from \"./hasar.service\";\nimport { TipoEstado } from \"../lib/types/comandoTipos\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ComandosService {\n  constructor(private hasarProvider: HasarProvider) {}\n\n  getEstado(\n    handleData: (data: TipoEstado) => void,\n    handleError: (error: Error) => void\n  ) {\n    return this.hasarProvider.sendComando(\n      { Estado: {} },\n      handleData,\n      handleError\n    );\n  }\n}\n","/*\n * Public API Surface of ngx-hasar\n */\n\nexport * from \"./services/comandos-fiscales.service\";\nexport * from \"./services/comandos.service\";\nexport * from \"./services/hasar.service\";\nexport * from \"./lib/types/comandoTipos\";\n\nexport * from \"./models/item\";\n\nexport { HASAR_CONFIG, HasarConfig as TipoHasarConfig } from \"./hasar.token\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.HasarProvider"],"mappings":";;;;;;MAOa,YAAY,GAAG,IAAI,cAAc,CAAc,WAAW;;MCC1D,aAAa,CAAA;AACxB,IAAA,WAAA,CACU,IAAgB,EACM,QAAqB;;QAD3C,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAY;QACM,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAa;KACjD;IAEI,IAAI,CACV,OAAe,EACf,WAAmB,EACnB,UAAkC,EAClC,WAAmC,EACnC,OAAA,GAAkB,KAAK,EAAA;AAEvB,QAAA,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE;AAC9B,aAAA,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;aACvC,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAElD,QAAA,IAAI,CAAC,IAAI;AACN,aAAA,IAAI,CACH,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,WAAW,GAAG,OAAO,EAC/C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EACvB;YACE,OAAO;AACP,YAAA,YAAY,EAAE,MAAM;SACrB,CACF;aACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACpC,aAAA,SAAS,CACR,CAAC,IAAI,KAAI;YACP,UAAU,CAAC,IAAI,CAAC,CAAC;AACnB,SAAC,EACD,CAAC,KAAK,KAAI;YACR,WAAW,CAAC,KAAK,CAAC,CAAC;AACrB,SAAC,CACF,CAAC;KACL;AAED,IAAA,WAAW,CACT,OAAe,EACf,UAA+B,EAC/B,WAAmC,EAAA;AAEnC,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;KAChE;AAED,IAAA,UAAU,CACR,OAAe,EACf,aAAkC,CAAC,IAAI,KAAI;AACzC,QAAA,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AACtC,KAAC,EACD,WAAA,GAAsC,CAAC,KAAK,KAAI;AAC9C,QAAA,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;KACvC,EAAA;AAED,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;KAC9D;;AAvDU,aAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAa,4CAGd,YAAY,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAHX,aAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAa,cAFZ,MAAM,EAAA,CAAA,CAAA;2FAEP,aAAa,EAAA,UAAA,EAAA,CAAA;kBAHzB,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;0BAII,MAAM;2BAAC,YAAY,CAAA;;;MCAX,uBAAuB,CAAA;AAClC,IAAA,WAAA,CAAoB,aAA4B,EAAA;QAA5B,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;KAAI;;IAGpD,QAAQ,CACN,SAGsB,eAAe,EAAA;AAErC,QAAA,IAAI,MAAM,GAAG;AACX,YAAA,cAAc,EAAE;AACd,gBAAA,iBAAiB,EAAE,MAAM;AAC1B,aAAA;SACF,CAAC;QAEF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAC9C;AAED,IAAA,YAAY,CAAC,KAAiB,EAAA;AAC5B,QAAA,IAAI,MAAM,GAAG;AACX,YAAA,YAAY,EAAE;gBACZ,WAAW,EAAE,KAAK,CAAC,WAAW;gBAC9B,QAAQ,EAAE,KAAK,CAAC,QAAQ;gBACxB,cAAc,EAAE,KAAK,CAAC,cAAc;AACpC,gBAAA,YAAY,EAAE,SAAS;gBACvB,WAAW,EAAE,KAAK,CAAC,WAAW;AAC9B,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,mBAAmB,EAAE,gBAAgB;AACrC,gBAAA,uBAAuB,EAAE,MAAM;AAC/B,gBAAA,WAAW,EAAE,WAAW;AACxB,gBAAA,aAAa,EAAE,iBAAiB;gBAChC,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;gBACxC,cAAc,EAAE,KAAK,CAAC,cAAc;gBACpC,aAAa,EAAE,KAAK,CAAC,aAAa;gBAClC,YAAY,EAAE,KAAK,CAAC,YAAY;AACjC,aAAA;SACF,CAAC;QAEF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAC9C;AAED,IAAA,mBAAmB,CAAC,WAAmB,EAAE,QAAA,GAAmB,UAAU,EAAA;AACpE,QAAA,MAAM,MAAM,GAAG;AACb,YAAA,mBAAmB,EAAE;AACnB,gBAAA,QAAQ,EAAE,QAAQ;AAClB,gBAAA,KAAK,EAAE,WAAW;AAClB,gBAAA,WAAW,EAAE,WAAW;AACzB,aAAA;SACF,CAAC;QAEF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAC9C;IAED,SAAS,CACP,EAAE,MAAM,EAA0B,GAAA,EAAE,EACpC,UAAsC,GAAA,MAAK,GAAG,EAAA;AAE9C,QAAA,IAAI,MAAM,GAAG;AACX,YAAA,eAAe,EAAE;AACf,gBAAA,MAAM,EAAE,MAAM;AACf,aAAA;SACF,CAAC;QAEF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;KAC1D;AAED,IAAA,YAAY,CAAC,EACX,WAAW,EACX,OAAO,EACP,SAAS,GAKV,EAAA;AACC,QAAA,MAAM,MAAM,GAAG;AACb,YAAA,YAAY,EAAE;gBACZ,WAAW,EAAE,WAAW,GAAG,WAAW,GAAG,SAAS;AAClD,gBAAA,KAAK,EAAE,OAAO;gBACd,SAAS,EAAE,SAAS,IAAI,IAAI,GAAG,QAAQ,GAAG,OAAO;AAClD,aAAA;SACF,CAAC;QAEF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAC9C;IAED,aAAa,CAAC,UAAmC,UAAU,EAAA;AACzD,QAAA,MAAM,MAAM,GAAG;AACb,YAAA,mBAAmB,EAAE;AACnB,gBAAA,OAAO,EAAE,OAAO;AACjB,aAAA;SACF,CAAC;QAEF,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAClC,MAAM,EACN,CAAC,IAAI,KAAI;AACP,YAAA,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;AACrC,SAAC,EACD,CAAC,KAAK,KAAI;AACR,YAAA,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;AAC9C,SAAC,CACF,CAAC;KACH;IAED,gBAAgB,GAAA;AACd,QAAA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,KAAI;AAC/D,YAAA,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAClC,SAAC,CAAC,CAAC;KACJ;AAED,IAAA,kBAAkB,CAAC,OAAoB,EAAA;AACrC,QAAA,MAAM,MAAM,GAAG;AACb,YAAA,kBAAkB,EAAE;gBAClB,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAC9C,aAAa,EAAE,OAAO,CAAC,aAAa;gBACpC,SAAS,EAAE,OAAO,CAAC,SAAS;AAC7B,aAAA;SACF,CAAC;AAEF,QAAA,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEpB,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KAC9C;;oHA7HU,uBAAuB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,aAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAvB,uBAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,uBAAuB,cAFtB,MAAM,EAAA,CAAA,CAAA;2FAEP,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBAHnC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;MCHY,eAAe,CAAA;AAC1B,IAAA,WAAA,CAAoB,aAA4B,EAAA;QAA5B,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;KAAI;IAEpD,SAAS,CACP,UAAsC,EACtC,WAAmC,EAAA;AAEnC,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CACnC,EAAE,MAAM,EAAE,EAAE,EAAE,EACd,UAAU,EACV,WAAW,CACZ,CAAC;KACH;;4GAZU,eAAe,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,aAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAf,eAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAe,cAFd,MAAM,EAAA,CAAA,CAAA;2FAEP,eAAe,EAAA,UAAA,EAAA,CAAA;kBAH3B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;ACND;;AAEG;;ACFH;;AAEG;;;;"}